{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yuemin\\\\Documents\\\\GitHub\\\\portfolio\\\\Client\\\\src\\\\Webpages\\\\SpotifyAPI.js\",\n  _s = $RefreshSig$();\nimport \"../styles/SpotifyAPI.css\";\nimport React from 'react';\nimport { useEffect, useState } from \"react\";\nimport axios from 'axios';\n\n/*\r\nTO DO:\r\n    change artist to songs if possible, mainly with the ability to play music, as well as show song name\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SpotifyAPI() {\n  _s();\n  console.log(\"bruh\");\n  const CLIENT_ID = \"b0fddc430d1245ec9a363bee851354d8\"; //identifier of the created app\n  const REDIRECT_URI = \"http://localhost:3000/SpotifyAPI\"; //where the user will get redirected once they login through spotify\n  const AUTH_ENDPOINT = \"https://accounts.spotify.com/authorize\"; //where the user will get directed once they click the login button on our page\n  const RESPONSE_TYPE = \"token\"; //the token of their credentials and permissions\n\n  const [token, setToken] = useState(\"\");\n  const [searchKey, setSearchKey] = useState(\"\");\n  const [artists, setArtists] = useState([]);\n  const [Results, setResults] = useState(\"\");\n  const [Error, setError] = useState(\"\");\n  const error400 = \"Sorry! looks like the request/response failed! (error 400)\";\n  const error401 = \"Sorry! looks like you have an invalid token (tokens expire after 1 hour!) (error 401)\";\n  const errorElse = \"Sorry! an unknown error has occured :(\";\n\n  //if the user entered nothing or uses the * character (explained more later) then set the results state to false/none and prevents the search from running\n  //as for the * character, in the actual spotify app you can search with the * character, however the API seems to despise it.\n  //I don't have enough knowledge on how their search params handle *, so we will refrain from using it for now\n  //also using a useEffect hook here to automatically search as the user types in the artist\n  useEffect(() => {\n    if (searchKey.trim() === \"\") {\n      setResults(\"none\");\n      return;\n    } else if (searchKey.startsWith(\"*\")) {\n      setResults(\"false\");\n      return;\n    }\n    window.sessionStorage.setItem(\"userSearch\", searchKey);\n    getArtists();\n  }, [searchKey]);\n  useEffect(() => {\n    //obtains the hash from our current webpage as well as token from our local storage (if we have one)\n    const hash = window.location.hash;\n    let token = window.localStorage.getItem(\"token\");\n    let userSearch = window.sessionStorage.getItem(\"userSearch\");\n    if (token && userSearch) {\n      setSearchKey(userSearch);\n    }\n    //if there is no token stored in the local storage (returned null) AND there is no hash...\n    if (!token && hash) {\n      //replaces the '#' and '?' symbols from our hash, then obtains the token using the urlParams.get function\n      let urlParams = new URLSearchParams(window.location.hash.replace(\"#\", \"?\"));\n      let token = urlParams.get('access_token');\n\n      //once the token is obtained, removes the hash and sets the token value into our localStorage as 'token'\n      window.location.hash = \"\";\n      window.localStorage.setItem(\"token\", token);\n      window.location.reload(false);\n      window.sessionStorage.removeItem(\"userSearch\");\n    }\n\n    //lastly, sets the 'state' of token to the value of the token we obtained\n    setToken(token);\n  }, []); // because [] is blank, the useEffect function runs only on its initial render\n\n  //sets the token state to blank and removes the localStorage token\n  const logout = () => {\n    setToken(\"\");\n    window.localStorage.removeItem(\"token\");\n    window.location.reload(false);\n  };\n\n  //we use axios as it is more secure (prevents xsrf), but functions similarly to a fetch request\n  //we use an async function with await to ensure that no further code is executed before the fetch request is complete\n  //we also use a try catch statement to ensure the webpage does not crash as well as provide error responses\n  //lastly, we set the state of artists to an array of all the items for each artist in the data we fetched\n  const getArtists = async () => {\n    try {\n      const {\n        data\n      } = await axios.get(\"https://api.spotify.com/v1/search\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        params: {\n          q: searchKey,\n          type: \"artist\"\n        }\n      });\n\n      //if the user enteres a value and there are no artists, set the Results state to false, and set to true in any other case (if there's at least 1 artist)\n      if (data.artists.items.length === 0) {\n        setResults(\"none\");\n      } else {\n        setResults(\"true\");\n      }\n      console.log(data);\n      setError(\"\");\n      setArtists(data.artists.items);\n    } catch (error) {\n      if (error.request.status === 400) {\n        setError(\"400\");\n      } else if (error.request.status === 401) {\n        setError(\"401\");\n      } else {\n        setError(\"Unknown\");\n      }\n      console.log(error);\n    }\n  };\n\n  //renders the genres of a particular artist in case they have more than one genre\n  const renderGenres = item => {\n    var genreList = \"\";\n    item.genres.forEach(genre => {\n      genreList += genre + \", \";\n    });\n    genreList = genreList.slice(0, -2);\n    return genreList;\n  };\n\n  //renders an error message depending on the error code\n  const renderError = () => {\n    if (Error === \"400\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: error400\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }, this);\n    } else if (Error === \"401\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: error401\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }, this);\n    } else if (Error === \"Unknown\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: errorElse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }, this);\n    }\n  };\n\n  //maps out the artists and gives each artists a div with their id as the key, then includes an image and their name.\n  //if the Results state is false, it will instead show no artists as this state would only be false if the search were to give an error or no artists\n  //clicking on a artist send the user to another page to view their top-10 tracks, as well as the ability to play them\n  const renderArtists = () => {\n    if (Results === \"false\" || Results === \"none\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this);\n    } else {\n      return artists.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"artistSection\",\n        onClick: () => {\n          window.sessionStorage.setItem(\"artistId\", item.id);\n          window.location.assign(\"http://localhost:3000/SpotifySongs\");\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"artistImage\",\n          children: item.images.length ? /*#__PURE__*/_jsxDEV(\"img\", {\n            src: item.images[0].url,\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 50\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"No Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 91\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"artistInfo\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"artistName\",\n            children: item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"artistFollowers\",\n            children: [\"Followers: \", item.followers.total, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"artistGenres\",\n            children: [\"Genres: \", renderGenres(item)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 25\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }, this));\n    }\n  };\n\n  //will render a message stating there were no reults and to inform the user to refrain from using * if the Results state is false\n  const renderResultsMessage = () => {\n    if (Results === \"false\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No results came up!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Refrain from using '*' in your searches\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 20\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this);\n    }\n  };\n\n  //allows the user to login to spotify (or log out if they are already logged in)\n  const LoginOut = () => {\n    if (!token) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: `${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=${RESPONSE_TYPE}`,\n          children: \"Login to Spotify\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: logout,\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }, this);\n    }\n  };\n\n  //displays the search text input as well as a message informing the user to login to use the spoitfy API if they are not\n  //also displays all the render components\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Spotify!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }, this), LoginOut(), token ? /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Search here: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setSearchKey(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 41\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Please login to use search feature\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"artistSection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }, this), renderResultsMessage(), renderError(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"artistResults\",\n      children: renderArtists()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 9\n  }, this);\n}\n_s(SpotifyAPI, \"D1onbeAOdCvE4jOLNwrc3RhHlmA=\");\n_c = SpotifyAPI;\nexport default SpotifyAPI;\nvar _c;\n$RefreshReg$(_c, \"SpotifyAPI\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","SpotifyAPI","_s","console","log","CLIENT_ID","REDIRECT_URI","AUTH_ENDPOINT","RESPONSE_TYPE","token","setToken","searchKey","setSearchKey","artists","setArtists","Results","setResults","Error","setError","error400","error401","errorElse","trim","startsWith","window","sessionStorage","setItem","getArtists","hash","location","localStorage","getItem","userSearch","urlParams","URLSearchParams","replace","get","reload","removeItem","logout","data","headers","Authorization","params","q","type","items","length","error","request","status","renderGenres","item","genreList","genres","forEach","genre","slice","renderError","children","fileName","_jsxFileName","lineNumber","columnNumber","renderArtists","map","className","onClick","id","assign","images","src","url","alt","name","followers","total","renderResultsMessage","LoginOut","href","onChange","e","target","value","_c","$RefreshReg$"],"sources":["C:/Users/Yuemin/Documents/GitHub/portfolio/Client/src/Webpages/SpotifyAPI.js"],"sourcesContent":["import \"../styles/SpotifyAPI.css\"\r\nimport React from 'react';\r\nimport {useEffect, useState} from \"react\";\r\nimport axios from 'axios';\r\n\r\n/*\r\nTO DO:\r\n    change artist to songs if possible, mainly with the ability to play music, as well as show song name\r\n*/\r\nfunction SpotifyAPI(){\r\n    console.log(\"bruh\")\r\n    const CLIENT_ID = \"b0fddc430d1245ec9a363bee851354d8\"; //identifier of the created app\r\n    const REDIRECT_URI = \"http://localhost:3000/SpotifyAPI\"; //where the user will get redirected once they login through spotify\r\n    const AUTH_ENDPOINT = \"https://accounts.spotify.com/authorize\"; //where the user will get directed once they click the login button on our page\r\n    const RESPONSE_TYPE = \"token\"; //the token of their credentials and permissions\r\n\r\n    const [token, setToken] = useState(\"\");\r\n    const [searchKey, setSearchKey] = useState(\"\");\r\n    const [artists, setArtists] = useState([]);\r\n    const [Results, setResults] = useState(\"\")\r\n    const [Error, setError] = useState(\"\");\r\n    const error400 = \"Sorry! looks like the request/response failed! (error 400)\";\r\n    const error401 = \"Sorry! looks like you have an invalid token (tokens expire after 1 hour!) (error 401)\";\r\n    const errorElse = \"Sorry! an unknown error has occured :(\";\r\n\r\n    //if the user entered nothing or uses the * character (explained more later) then set the results state to false/none and prevents the search from running\r\n        //as for the * character, in the actual spotify app you can search with the * character, however the API seems to despise it.\r\n        //I don't have enough knowledge on how their search params handle *, so we will refrain from using it for now\r\n        //also using a useEffect hook here to automatically search as the user types in the artist\r\n    useEffect(()=> {\r\n        if (searchKey.trim() === \"\" ) {\r\n            setResults(\"none\");\r\n            return;\r\n        } else if(searchKey.startsWith(\"*\")) {\r\n            setResults(\"false\");\r\n            return;\r\n        }\r\n        window.sessionStorage.setItem(\"userSearch\", searchKey);\r\n        getArtists();\r\n    }, [searchKey]);\r\n\r\n    useEffect(()=> {\r\n        //obtains the hash from our current webpage as well as token from our local storage (if we have one)\r\n        const hash = window.location.hash;\r\n        let token = window.localStorage.getItem(\"token\");\r\n        let userSearch = window.sessionStorage.getItem(\"userSearch\")\r\n\r\n        if (token && userSearch) {\r\n            setSearchKey(userSearch);\r\n        }\r\n        //if there is no token stored in the local storage (returned null) AND there is no hash...\r\n        if(!token && hash) {\r\n            //replaces the '#' and '?' symbols from our hash, then obtains the token using the urlParams.get function\r\n            let urlParams = new URLSearchParams(window.location.hash.replace(\"#\",\"?\"));\r\n            let token = urlParams.get('access_token');\r\n\r\n            //once the token is obtained, removes the hash and sets the token value into our localStorage as 'token'\r\n            window.location.hash=\"\";\r\n            window.localStorage.setItem(\"token\", token);\r\n            window.location.reload(false);\r\n            window.sessionStorage.removeItem(\"userSearch\");\r\n        }\r\n\r\n        //lastly, sets the 'state' of token to the value of the token we obtained\r\n        setToken(token);\r\n    }, [])// because [] is blank, the useEffect function runs only on its initial render\r\n\r\n    //sets the token state to blank and removes the localStorage token\r\n    const logout = () => {\r\n        setToken(\"\");\r\n        window.localStorage.removeItem(\"token\");\r\n        window.location.reload(false);\r\n    }\r\n\r\n    //we use axios as it is more secure (prevents xsrf), but functions similarly to a fetch request\r\n    //we use an async function with await to ensure that no further code is executed before the fetch request is complete\r\n    //we also use a try catch statement to ensure the webpage does not crash as well as provide error responses\r\n    //lastly, we set the state of artists to an array of all the items for each artist in the data we fetched\r\n    const getArtists = async () => {\r\n        try{\r\n            const {data} = await axios.get(\"https://api.spotify.com/v1/search\", {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`\r\n                },\r\n                params: {\r\n                    q: searchKey,\r\n                    type: \"artist\"\r\n                }\r\n            })\r\n\r\n        //if the user enteres a value and there are no artists, set the Results state to false, and set to true in any other case (if there's at least 1 artist)\r\n        if (data.artists.items.length === 0) {\r\n            setResults(\"none\");\r\n        } else {\r\n            setResults(\"true\");\r\n        }\r\n        console.log(data);\r\n        setError(\"\");\r\n        setArtists(data.artists.items);\r\n\r\n    }catch(error){\r\n        if (error.request.status === 400) {\r\n            setError(\"400\");\r\n        } else if (error.request.status === 401) {\r\n            setError(\"401\");\r\n        } else {\r\n            setError(\"Unknown\");\r\n        }\r\n        console.log(error);\r\n    } \r\n    }\r\n\r\n    //renders the genres of a particular artist in case they have more than one genre\r\n    const renderGenres = (item) => {\r\n        var genreList = \"\";\r\n        item.genres.forEach(genre => {\r\n            genreList += genre+\", \";\r\n        })\r\n\r\n        genreList = genreList.slice(0, -2);\r\n        \r\n        return genreList;\r\n    }\r\n\r\n    //renders an error message depending on the error code\r\n    const renderError = () => {\r\n        if (Error === \"400\") {\r\n            return(\r\n            <div>{error400}</div>\r\n            )\r\n        } else if (Error === \"401\") {\r\n            return(\r\n            <div>{error401}</div>\r\n            )\r\n        } else if (Error === \"Unknown\"){\r\n            return(\r\n            <div>{errorElse}</div>\r\n            )\r\n        } else {\r\n            return(\r\n            <div></div>\r\n            )\r\n        }\r\n    }\r\n\r\n    //maps out the artists and gives each artists a div with their id as the key, then includes an image and their name.\r\n    //if the Results state is false, it will instead show no artists as this state would only be false if the search were to give an error or no artists\r\n    //clicking on a artist send the user to another page to view their top-10 tracks, as well as the ability to play them\r\n    const renderArtists = () => {\r\n        if (Results === \"false\" || Results === \"none\") {\r\n            return (\r\n                <div></div>\r\n            )\r\n        } else {\r\n            return artists.map(item => (\r\n                    <div key={item.id}className=\"artistSection\" onClick={() => {\r\n                        window.sessionStorage.setItem(\"artistId\", item.id)\r\n                        window.location.assign(\"http://localhost:3000/SpotifySongs\");\r\n                    }}>\r\n                        <div className=\"artistImage\">\r\n                           {item.images.length ? <img src={item.images[0].url} alt=\"\"/> : <div>No Image</div>}\r\n                        </div>\r\n                        <div className=\"artistInfo\">\r\n                            <p className=\"artistName\">{item.name}</p>\r\n                            <p className=\"artistFollowers\">Followers: {item.followers.total} </p>\r\n                            <p className=\"artistGenres\">Genres: {renderGenres(item)}</p>\r\n                        </div>\r\n                    </div>\r\n                \r\n            ));\r\n        }\r\n    }\r\n\r\n    //will render a message stating there were no reults and to inform the user to refrain from using * if the Results state is false\r\n    const renderResultsMessage = () => {\r\n        if (Results === \"false\") {\r\n            return (\r\n                <div>\r\n                   <p>No results came up!</p>\r\n                   <p>Refrain from using '*' in your searches</p>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div></div>\r\n            )\r\n        }\r\n    }\r\n\r\n    //allows the user to login to spotify (or log out if they are already logged in)\r\n    const LoginOut = () => {\r\n        if (!token) {\r\n            return (\r\n                <div>\r\n                    <a href={`${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=${RESPONSE_TYPE}`}>Login to Spotify</a> \r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n            <div>\r\n                <button onClick={logout}>Logout</button>\r\n            </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    //displays the search text input as well as a message informing the user to login to use the spoitfy API if they are not\r\n    //also displays all the render components\r\n    return(\r\n        <div>\r\n            <h1>Spotify!</h1>\r\n            {LoginOut()}\r\n            {token ? \r\n                <form> \r\n                    <p>Search here: </p><input type=\"text\" onChange={e => setSearchKey(e.target.value)}/>\r\n                </form>\r\n\r\n                : <h2>Please login to use search feature</h2>\r\n            }\r\n            <div id='artistSection'>\r\n\r\n            </div>\r\n            {renderResultsMessage()}\r\n            {renderError()}\r\n            <div className=\"artistResults\">\r\n                {renderArtists()}\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SpotifyAPI;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}