{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yuemin\\\\Documents\\\\GitHub\\\\portfolio\\\\Client\\\\src\\\\Webpages\\\\DatabaseUsage.js\",\n  _s = $RefreshSig$();\nimport \"../styles/Database.css\";\nimport React from 'react';\nimport Axios from 'axios';\nimport { flexRender, getCoreRowModel, useReactTable } from '@tanstack/react-table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Databases() {\n  _s();\n  //useState to store the data obtained from the database\n  const [arrayData, setarrayData] = React.useState([]);\n  const columns = [{\n    accessorKey: 'FIRSTNAM',\n    header: \"First Name\",\n    cell: props => {\n      var _props$getValue;\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: (_props$getValue = props.getValue()) === null || _props$getValue === void 0 ? void 0 : _props$getValue.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 30\n      }, this);\n    }\n  }, {\n    accessorKey: 'LASTNAM',\n    header: \"Last Name\",\n    cell: props => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: props.getValue()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 30\n    }, this)\n  }, {\n    accessorKey: 'EMAI',\n    header: \"Email Address\",\n    cell: props => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: props.getValue()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 30\n    }, this)\n  }, {\n    accessorKey: 'ADDRES',\n    header: \"Address\",\n    cell: props => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: props.getValue()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 30\n    }, this)\n  }, {\n    accessorKey: 'PHON',\n    header: \"Phone Number\",\n    cell: props => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: props.getValue()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 30\n    }, this)\n  }, {\n    accessorKey: 'ACCESSLEVE',\n    header: \"Access Level\",\n    cell: props => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: props.getValue()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 30\n    }, this)\n  }, {\n    accessorKey: 'PASSWOR',\n    header: \"Password\",\n    cell: props => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: props.getValue()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 30\n    }, this)\n  }];\n  const table = useReactTable({\n    arrayData,\n    columns,\n    getCoreRowModel: getCoreRowModel()\n  });\n\n  //runs only on first load. Only used to automatically fetch the database data and store it\n  React.useEffect(() => {\n    try {\n      Axios.get(\"/test\").then(response => {\n        setarrayData(response.data.rows);\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Databases\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-container\",\n      children: [table.getHeaderGroups().map(headerGroup => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tr\",\n        children: headerGroup.headers.map(header => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"th\",\n          children: header.column.columnDef.header\n        }, header.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 35\n        }, this))\n      }, headerGroup.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 61\n      }, this)), table.getRowModel().rows.map(row => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tr\",\n        children: row.getVisibleCells().map(cell => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"td\",\n          children: flexRender(cell.column.columnDef.cell, cell.getContext())\n        }, cell.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 56\n        }, this))\n      }, row.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 54\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n_s(Databases, \"gZjoFs64UTTH/T9od7gAYFcYxSg=\", false, function () {\n  return [useReactTable];\n});\n_c = Databases;\nexport default Databases;\nvar _c;\n$RefreshReg$(_c, \"Databases\");","map":{"version":3,"names":["React","Axios","flexRender","getCoreRowModel","useReactTable","jsxDEV","_jsxDEV","Databases","_s","arrayData","setarrayData","useState","columns","accessorKey","header","cell","props","_props$getValue","children","getValue","name","fileName","_jsxFileName","lineNumber","columnNumber","table","useEffect","get","then","response","data","rows","err","console","log","className","getHeaderGroups","map","headerGroup","headers","column","columnDef","id","getRowModel","row","getVisibleCells","getContext","_c","$RefreshReg$"],"sources":["C:/Users/Yuemin/Documents/GitHub/portfolio/Client/src/Webpages/DatabaseUsage.js"],"sourcesContent":["import \"../styles/Database.css\"\r\nimport React from 'react';\r\nimport Axios from 'axios';\r\nimport {flexRender, getCoreRowModel, useReactTable} from '@tanstack/react-table';\r\n\r\nfunction Databases(){\r\n\r\n    //useState to store the data obtained from the database\r\n    const [arrayData, setarrayData] = React.useState([]);\r\n    const columns = [\r\n        {\r\n            accessorKey: 'FIRSTNAM',\r\n            header: \"First Name\",\r\n            cell: (props) => <p>{props.getValue()?.name}</p>\r\n        },\r\n        {\r\n            accessorKey: 'LASTNAM',\r\n            header: \"Last Name\",\r\n            cell: (props) => <p>{props.getValue()}</p>\r\n        },\r\n        {\r\n            accessorKey: 'EMAI',\r\n            header: \"Email Address\",\r\n            cell: (props) => <p>{props.getValue()}</p>\r\n        },\r\n        {\r\n            accessorKey: 'ADDRES',\r\n            header: \"Address\",\r\n            cell: (props) => <p>{props.getValue()}</p>\r\n        },\r\n        {\r\n            accessorKey: 'PHON',\r\n            header: \"Phone Number\",\r\n            cell: (props) => <p>{props.getValue()}</p>\r\n        },\r\n        {\r\n            accessorKey: 'ACCESSLEVE',\r\n            header: \"Access Level\",\r\n            cell: (props) => <p>{props.getValue()}</p>\r\n        },\r\n        {\r\n            accessorKey: 'PASSWOR',\r\n            header: \"Password\",\r\n            cell: (props) => <p>{props.getValue()}</p>\r\n        },\r\n    ]\r\n    const table = useReactTable({\r\n        arrayData,\r\n        columns,\r\n        getCoreRowModel:getCoreRowModel()\r\n    })\r\n\r\n    //runs only on first load. Only used to automatically fetch the database data and store it\r\n    React.useEffect(() => {\r\n        try {\r\n            Axios.get(\"/test\").then((response) => {\r\n                setarrayData(response.data.rows)\r\n            })\r\n        } catch (err){\r\n            console.log(err);\r\n        }\r\n    }, [])\r\n\r\n    return(\r\n        <div>\r\n            <h1>Databases</h1>\r\n            <div className='table-container'>\r\n                {table.getHeaderGroups().map(headerGroup => <div className = \"tr\" key={headerGroup.id}>\r\n                    {headerGroup.headers.map(\r\n                        header => <div className=\"th\" key={header.id}>\r\n                            {header.column.columnDef.header}\r\n                        </div>\r\n                    )}\r\n                </div>)}\r\n\r\n                {table.getRowModel().rows.map(row => <div className = \"tr\" key={row.id}>\r\n                    {row.getVisibleCells().map(cell => <div className=\"td\" key={cell.id}>\r\n                            {flexRender(\r\n                                cell.column.columnDef.cell,\r\n                                cell.getContext()\r\n                            )}\r\n                        </div>)}\r\n                    </div>)\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Databases;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}