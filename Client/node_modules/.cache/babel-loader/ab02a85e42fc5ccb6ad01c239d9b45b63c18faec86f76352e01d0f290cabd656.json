{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yuemin\\\\Documents\\\\GitHub\\\\portfolio\\\\Client\\\\src\\\\Webpages\\\\DatabaseUsage.js\",\n  _s = $RefreshSig$();\nimport \"../styles/Database.css\";\nimport React from 'react';\nimport Axios from 'axios';\nimport { flexRender, getCoreRowModel, useReactTable } from '@tanstack/react-table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Databases() {\n  _s();\n  //runs only on first load. Only used to automatically fetch the database data and store it\n  React.useEffect(() => {\n    try {\n      Axios.get(\"/test\").then(response => {\n        ObjectConversion(response.data.rows);\n        //setarrayData(response.data.rows);\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }, []);\n\n  //useState to store the data obtained from the database\n  const [data, setData] = React.useState([]);\n  function ObjectConversion(arrayData) {\n    var data = [];\n    if (arrayData) {\n      console.log(arrayData);\n      arrayData.forEach(row => {\n        var object = {\n          \"first_name\": row[1],\n          \"last_name\": row[2]\n        };\n        data.push(object);\n      });\n      console.log(data);\n      setData(data);\n    }\n  }\n  const columns = [{\n    accessorKey: \"first_name\",\n    header: \"First Name\",\n    cell: props => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: props.getValue()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 30\n    }, this)\n  }, {\n    accessorKey: \"last_name\",\n    header: \"Last Name\",\n    cell: props => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: props.getValue()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 30\n    }, this)\n  }];\n  const table = useReactTable({\n    columns,\n    data,\n    getCoreRowModel: getCoreRowModel()\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Databases\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-container\",\n      children: [table.getHeaderGroups().map(headerGroup => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tr\",\n        children: headerGroup.headers.map(header => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"th\",\n          children: header.column.columnDef.header\n        }, header.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 35\n        }, this))\n      }, headerGroup.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 61\n      }, this)),\n      //getRowModel().rows returns an array of rows\n      table.getRowModel().rows.map(row => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tr\",\n        children: row.getVisibleCells().map(cell => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"td\",\n          children: flexRender(cell.column.columnDef.cell, cell.getContext())\n        }, cell.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 52\n        }, this))\n      }, row.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 53\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n_s(Databases, \"lutXJ90dx/fhhhNMrbf9D0keikc=\", false, function () {\n  return [useReactTable];\n});\n_c = Databases;\nexport default Databases;\nvar _c;\n$RefreshReg$(_c, \"Databases\");","map":{"version":3,"names":["React","Axios","flexRender","getCoreRowModel","useReactTable","jsxDEV","_jsxDEV","Databases","_s","useEffect","get","then","response","ObjectConversion","data","rows","err","console","log","setData","useState","arrayData","forEach","row","object","push","columns","accessorKey","header","cell","props","children","getValue","fileName","_jsxFileName","lineNumber","columnNumber","table","className","getHeaderGroups","map","headerGroup","headers","column","columnDef","id","getRowModel","getVisibleCells","getContext","_c","$RefreshReg$"],"sources":["C:/Users/Yuemin/Documents/GitHub/portfolio/Client/src/Webpages/DatabaseUsage.js"],"sourcesContent":["import \"../styles/Database.css\";\r\nimport React from 'react';\r\nimport Axios from 'axios';\r\nimport {flexRender, getCoreRowModel, useReactTable} from '@tanstack/react-table';\r\n\r\nfunction Databases(){\r\n\r\n     //runs only on first load. Only used to automatically fetch the database data and store it\r\n     React.useEffect(() => {\r\n        try {\r\n            Axios.get(\"/test\").then((response) => {\r\n                ObjectConversion(response.data.rows);\r\n                //setarrayData(response.data.rows);\r\n            })\r\n        } catch (err){\r\n            console.log(err);\r\n        }\r\n    }, [])\r\n\r\n    //useState to store the data obtained from the database\r\n    const [data, setData] = React.useState([]);\r\n\r\n    function ObjectConversion(arrayData){\r\n        var data = []\r\n        if (arrayData){\r\n            console.log(arrayData);\r\n            arrayData.forEach(row => {\r\n                var object = {\r\n                    \"first_name\": row[1],\r\n                    \"last_name\": row[2]\r\n                }\r\n                data.push(object);\r\n            });\r\n            console.log(data)\r\n            setData(data)\r\n        }\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            accessorKey: \"first_name\",\r\n            header: \"First Name\",\r\n            cell: (props) => <p>{props.getValue()}</p>\r\n        },\r\n        {\r\n            accessorKey: \"last_name\",\r\n            header: \"Last Name\",\r\n            cell: (props) => <p>{props.getValue()}</p>\r\n        }\r\n    ]\r\n    const table = useReactTable({\r\n        columns,\r\n        data,\r\n        getCoreRowModel:getCoreRowModel()\r\n    })\r\n\r\n    return(\r\n        <div>\r\n            <h1>Databases</h1>\r\n            <div className='table-container'>\r\n                {table.getHeaderGroups().map(headerGroup => <div className = \"tr\" key={headerGroup.id}>\r\n                    {headerGroup.headers.map(\r\n                        header => <div className=\"th\" key={header.id}>\r\n                            {header.column.columnDef.header}\r\n                        </div>\r\n                    )}\r\n                </div>)}\r\n                {//getRowModel().rows returns an array of rows\r\n                table.getRowModel().rows.map(row => <div className = \"tr\" key={row.id}>\r\n                {row.getVisibleCells().map(cell => <div className=\"td\" key={cell.id}>\r\n                        {flexRender(\r\n                            cell.column.columnDef.cell,\r\n                            cell.getContext()\r\n                        )}\r\n                    </div>)}\r\n                </div>)\r\n            }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Databases;"],"mappings":";;AAAA,OAAO,wBAAwB;AAC/B,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,OAAO;AACzB,SAAQC,UAAU,EAAEC,eAAe,EAAEC,aAAa,QAAO,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjF,SAASC,SAASA,CAAA,EAAE;EAAAC,EAAA;EAEf;EACAR,KAAK,CAACS,SAAS,CAAC,MAAM;IACnB,IAAI;MACAR,KAAK,CAACS,GAAG,CAAC,OAAO,CAAC,CAACC,IAAI,CAAEC,QAAQ,IAAK;QAClCC,gBAAgB,CAACD,QAAQ,CAACE,IAAI,CAACC,IAAI,CAAC;QACpC;MACJ,CAAC,CAAC;IACN,CAAC,CAAC,OAAOC,GAAG,EAAC;MACTC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IACpB;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM,CAACF,IAAI,EAAEK,OAAO,CAAC,GAAGnB,KAAK,CAACoB,QAAQ,CAAC,EAAE,CAAC;EAE1C,SAASP,gBAAgBA,CAACQ,SAAS,EAAC;IAChC,IAAIP,IAAI,GAAG,EAAE;IACb,IAAIO,SAAS,EAAC;MACVJ,OAAO,CAACC,GAAG,CAACG,SAAS,CAAC;MACtBA,SAAS,CAACC,OAAO,CAACC,GAAG,IAAI;QACrB,IAAIC,MAAM,GAAG;UACT,YAAY,EAAED,GAAG,CAAC,CAAC,CAAC;UACpB,WAAW,EAAEA,GAAG,CAAC,CAAC;QACtB,CAAC;QACDT,IAAI,CAACW,IAAI,CAACD,MAAM,CAAC;MACrB,CAAC,CAAC;MACFP,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;MACjBK,OAAO,CAACL,IAAI,CAAC;IACjB;EACJ;EAEA,MAAMY,OAAO,GAAG,CACZ;IACIC,WAAW,EAAE,YAAY;IACzBC,MAAM,EAAE,YAAY;IACpBC,IAAI,EAAGC,KAAK,iBAAKxB,OAAA;MAAAyB,QAAA,EAAID,KAAK,CAACE,QAAQ,CAAC;IAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAC7C,CAAC,EACD;IACIT,WAAW,EAAE,WAAW;IACxBC,MAAM,EAAE,WAAW;IACnBC,IAAI,EAAGC,KAAK,iBAAKxB,OAAA;MAAAyB,QAAA,EAAID,KAAK,CAACE,QAAQ,CAAC;IAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAC7C,CAAC,CACJ;EACD,MAAMC,KAAK,GAAGjC,aAAa,CAAC;IACxBsB,OAAO;IACPZ,IAAI;IACJX,eAAe,EAACA,eAAe,CAAC;EACpC,CAAC,CAAC;EAEF,oBACIG,OAAA;IAAAyB,QAAA,gBACIzB,OAAA;MAAAyB,QAAA,EAAI;IAAS;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClB9B,OAAA;MAAKgC,SAAS,EAAC,iBAAiB;MAAAP,QAAA,GAC3BM,KAAK,CAACE,eAAe,CAAC,CAAC,CAACC,GAAG,CAACC,WAAW,iBAAInC,OAAA;QAAKgC,SAAS,EAAG,IAAI;QAAAP,QAAA,EAC5DU,WAAW,CAACC,OAAO,CAACF,GAAG,CACpBZ,MAAM,iBAAItB,OAAA;UAAKgC,SAAS,EAAC,IAAI;UAAAP,QAAA,EACxBH,MAAM,CAACe,MAAM,CAACC,SAAS,CAAChB;QAAM,GADAA,MAAM,CAACiB,EAAE;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEvC,CACT;MAAC,GALkEK,WAAW,CAACI,EAAE;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMhF,CAAC,CAAC;MACN;MACDC,KAAK,CAACS,WAAW,CAAC,CAAC,CAAC/B,IAAI,CAACyB,GAAG,CAACjB,GAAG,iBAAIjB,OAAA;QAAKgC,SAAS,EAAG,IAAI;QAAAP,QAAA,EACxDR,GAAG,CAACwB,eAAe,CAAC,CAAC,CAACP,GAAG,CAACX,IAAI,iBAAIvB,OAAA;UAAKgC,SAAS,EAAC,IAAI;UAAAP,QAAA,EAC7C7B,UAAU,CACP2B,IAAI,CAACc,MAAM,CAACC,SAAS,CAACf,IAAI,EAC1BA,IAAI,CAACmB,UAAU,CAAC,CACpB;QAAC,GAJmDnB,IAAI,CAACgB,EAAE;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAK1D,CAAC;MAAC,GANoDb,GAAG,CAACsB,EAAE;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOhE,CAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAAC5B,EAAA,CA3EQD,SAAS;EAAA,QA6CAH,aAAa;AAAA;AAAA6C,EAAA,GA7CtB1C,SAAS;AA6ElB,eAAeA,SAAS;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}